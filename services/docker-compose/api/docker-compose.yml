version: "3"

services:
  reverse-proxy:
    image: nginx:latest
    container_name: ${NGINX_CONTAINER_NAME}
    depends_on:
      - ${IOT_API_CONTAINER_NAME}
      - ${UTILITIES_API_CONTAINER_NAME}
      - ${WEATHER_API_CONTAINER_NAME}
      - ${PORTAINER_CONTAINER_NAME}
    volumes:
      - "${NGINX_FOLDER}/api.conf:/etc/nginx/nginx.conf"
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    
  postgres:
    image: postgres:latest
    container_name: ${DB_CONTAINER_NAME}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
      - POSTGRES_PORT=${DB_PORT}
      - IOT_DB_USER=${IOT_DB_USER}
      - IOT_DB_PASS=${IOT_DB_PASS}
      - IOT_DB_NAME=${IOT_DB_NAME}
      - UTILITIES_DB_USER=${UTILITIES_DB_USER}
      - UTILITIES_DB_PASS=${UTILITIES_DB_PASS}
      - UTILITIES_DB_NAME=${UTILITIES_DB_NAME}
      - WEATHER_DB_USER=${WEATHER_DB_USER}
      - WEATHER_DB_PASS=${WEATHER_DB_PASS}
      - WEATHER_DB_NAME=${WEATHER_DB_NAME}
    volumes: 
      - ./postgres-data:/var/lib/postgresql/data
      - ${POSTGRES_FOLDER}/env.sh:/docker-entrypoint-initdb.d/1.init-env.sh
      - ${POSTGRES_FOLDER}/init_db.sh:/docker-entrypoint-initdb.d/2.init-db.sh
      - ${POSTGRES_FOLDER}/init_roles.sh:/docker-entrypoint-initdb.d/3.init-roles.sh
      - ${POSTGRES_FOLDER}/iot:/migrations/iot
      - ${POSTGRES_FOLDER}/utilities:/migrations/utilities
      - ${POSTGRES_FOLDER}/weather:/migrations/weather
    ports:
      - "${DB_PORT}:${DB_PORT}"

  redis:
    image: redis:latest
    container_name: ${CACHE_CONTAINER_NAME}
    command: redis-server --port ${CACHE_PORT}
    volumes:
      - ./redis-data:/var/lib/redis
    ports:
      - "${CACHE_PORT}:${CACHE_PORT}"
    
  iot-api:
    image: ${IOT_API_CONTAINER_NAME}
    container_name: ${IOT_API_CONTAINER_NAME}
    depends_on:
      - ${DB_CONTAINER_NAME}
      - ${CACHE_CONTAINER_NAME}
    build:
      context: "${IOT_FOLDER}/api"
      args:
        IOT_API_PORT: "$IOT_API_PORT"
    env_file:
      - ${IOT_FOLDER}/api/.env
    volumes:
      - "${IOT_FOLDER}/api:/app"
    ports:
      - "${IOT_API_PORT}:${IOT_API_PORT}"
    restart: on-failure

  utilities-api:
    image: ${UTILITIES_API_CONTAINER_NAME}
    container_name: ${UTILITIES_API_CONTAINER_NAME}
    depends_on:
      - ${DB_CONTAINER_NAME}
      - ${CACHE_CONTAINER_NAME}
    build:
      context: "${UTILITIES_FOLDER}/api"
      args:
        UTILITIES_API_PORT: "$UTILITIES_API_PORT"
    env_file:
      - ${UTILITIES_FOLDER}/api/.env
    volumes:
      - "${UTILITIES_FOLDER}/api:/app"
    ports:
      - "${UTILITIES_API_PORT}:${UTILITIES_API_PORT}"
    restart: on-failure

  weather-api:
    image: ${WEATHER_API_CONTAINER_NAME}
    container_name: ${WEATHER_API_CONTAINER_NAME}
    depends_on:
      - ${DB_CONTAINER_NAME}
      - ${CACHE_CONTAINER_NAME}
    build:
      context: "${WEATHER_FOLDER}/api"
      args:
        WEATHER_API_PORT: "$WEATHER_API_PORT"
    env_file:
      - ${WEATHER_FOLDER}/api/.env
    volumes:
      - "${WEATHER_FOLDER}/api:/app"
    ports:
      - "${WEATHER_API_PORT}:${WEATHER_API_PORT}"
    restart: on-failure

  api-portainer:
    image: portainer/portainer-ce:latest
    container_name: ${PORTAINER_CONTAINER_NAME}
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - ${PORTAINER_PORT}:${PORTAINER_PORT}
